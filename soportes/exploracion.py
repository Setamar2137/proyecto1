# -*- coding: utf-8 -*-
"""Exploracion (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/106K6mIN6TupS5BhiTEruK6g-wW_UhXbe
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
import missingno as mn
import seaborn as sb
from scipy.stats import chi2_contingency
from sklearn import datasets, linear_model
from sklearn.model_selection import train_test_split

#Importar datos desde el archivo de CSV
#archivo = "C:/Users/natal/OneDrive/Documentos/U/2024-2/Analitica/PROYECTO1/datoslimpios.csv"
archivo = "C:/Users/danie/Documents/PROYECTO1/datoslimpios.csv"
datos = pd.read_csv(archivo)

#EXPLORACION DE DATOS


datos.describe()

#BICICLETAS RENTADAS
plt.figure(figsize=(10, 6))
sb.histplot(data=datos,x="Rented Bike Count",kde=True)

# Añadir título y etiquetas
plt.title("Distribución de bicicletas rentadas", fontsize=16)
plt.xlabel("Bicicletas rentadas", fontsize=12)
plt.ylabel("Frecuencia", fontsize=12)

#TEMPERATURA
plt.figure(figsize=(10, 6))
sb.histplot(data=datos,x="Temperature(C)",kde=True)

# Añadir título y etiquetas
plt.title("Distribución de Temperatura(C)", fontsize=16)
plt.xlabel("Temperatura(C)", fontsize=12)
plt.ylabel("Frecuencia", fontsize=12)

# Mostrar el gráfico
plt.show()

#Colores
colores_estaciones = {"Winter": "#0cb7f2", "Spring": "#8db600", "Summer": "#ffa500", "Autumn": "#62162f"}
colores_vacaciones = {'Holiday':"#8db600","No Holiday":"#8b0000"}
colores_dia_func = {'Yes':"#8db600","No":"#8b0000"}

# Crear una nueva columna para identificar la estación basada en las dummies
def determinar_estacion(row):
    if row['Seasons_Spring'] == 1:
        return 'Spring'
    elif row['Seasons_Summer'] == 1:
        return 'Summer'
    elif row['Seasons_Winter'] == 1:
        return 'Winter'
    else:
        return 'Autumn'  # Esta es la estación base

# Aplicar la función a cada fila
datos['Estacion'] = datos.apply(determinar_estacion, axis=1)

# Gráfico de violín con las estaciones (incluyendo la base 'Autumn')
plt.figure(figsize=(10, 6))
sb.violinplot(x="Estacion", y="Rented Bike Count", data=datos, palette=colores_estaciones)

# Calcular la media de bicicletas rentadas por estación
media_bicicletas = datos.groupby("Estacion")["Rented Bike Count"].mean()

# Ordenar las estaciones para que la línea siga el orden correcto
estaciones_ordenadas = ['Winter', 'Spring', 'Summer', 'Autumn']
media_bicicletas = media_bicicletas.reindex(estaciones_ordenadas)

# Añadir la línea que conecta las medias
plt.plot(estaciones_ordenadas, media_bicicletas, color='red', marker='o', linestyle='-', linewidth=2, markersize=6, label='Media de bicicletas rentadas')

# Añadir título y etiquetas
plt.title("Cantidad de bicicletas rentadas por Estación", fontsize=16)
plt.xlabel("Estación", fontsize=12)
plt.ylabel("Bicicletas rentadas", fontsize=12)

# Añadir la leyenda de las medias
plt.legend()

# Mostrar el gráfico
plt.show()

# Crear una nueva columna para identificar si es vacaciones basada en las dummies
def determinar_vacaciones(row):
    if row['Holiday_No Holiday'] == 1:
        return 'No Holiday'
    else:
        return 'Holiday'  # Esta es la base

# Aplicar la función a cada fila
datos['Vacaciones'] = datos.apply(determinar_vacaciones, axis=1)

# Gráfico de violín con las vacaciones (incluyendo la base 'Holiday')
plt.figure(figsize=(10, 6))
sb.violinplot(x="Vacaciones", y="Rented Bike Count", data=datos, palette=colores_vacaciones)

# Añadir título y etiquetas
plt.title("Cantidad de bicicletas en vacaciones", fontsize=16)
plt.xlabel("Vacaciones", fontsize=12)
plt.ylabel("Bicicletas rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS Precipitaciones(mm)

# Crear el joint plot
jp = sb.jointplot(x="Rainfall(mm)", y="Rented Bike Count", data=datos, kind="hist", height=6)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y precipitacion(mm)", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Precipitaciones(mm)", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS Nieve(cm)

# Crear el joint plot
jp = sb.jointplot(x="Snowfall (cm)", y="Rented Bike Count", data=datos, kind="hist", height=6,)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y Nieve(cm)", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Nieve(cm)", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS humedad(%)

# Crear el joint plot
jp = sb.jointplot(x="Humidity(%)", y="Rented Bike Count", data=datos, kind="hex", height=6,)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y Humedad(%)", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Humedad(%)", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS radiación

# Crear el joint plot
jp = sb.jointplot(x="Solar Radiation (MJ/m2)", y="Rented Bike Count", data=datos, kind="scatter", height=6,)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y Radiación Solar(MJ/m2)", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Radiación Solar(MJ/m2)", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS Hora del día

# Crear el joint plot
jp = sb.jointplot(x="Hour", y="Rented Bike Count", data=datos, kind="hist", height=8)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y Hora", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Hora", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS Temperatura

# Crear el joint plot
jp = sb.jointplot(x="Temperature(C)", y="Rented Bike Count", data=datos, kind="hist", height=8)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y Temperatura(C)", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Temperatura(C)", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS velocidad del viento

# Crear el joint plot
jp = sb.jointplot(x="Wind speed (m/s)", y="Rented Bike Count", data=datos, kind="hist", height=8)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y Velocidad del viento(m/s)", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Velocidad del viento(m/s)", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

#Gráfico de puntos - Bicicletas rentadas VS visibilidad(10m)

# Crear el joint plot
jp = sb.jointplot(x="Visibility (10m)", y="Rented Bike Count", data=datos, kind="hist", height=8)

# Cambiar el título principal
jp.fig.suptitle("Relación Bicicletas Rentadas y Visibilidad(10m)", fontsize=16)

# Ajustar la posición del título
jp.fig.subplots_adjust(top=0.95)

# Cambiar etiquetas de los ejes
jp.set_axis_labels("Visibilidad(10m)", "Bicicletas Rentadas", fontsize=12)

# Mostrar el gráfico
plt.show()

# Eliminar las columnas "Vacaciones" y "Estación" del DataFrame
datos = datos.drop(['Date','Vacaciones', 'Estacion'], axis=1, errors='ignore')
mn.matrix(datos)

#relacion entre variables cuantitativas
#Variables cuantitativas
datosc = pd.read_csv(archivo,usecols=[1,2,3,4,5,6,7,8,9,10])


# Paso 1: Calcular la matriz de correlación (Pearson por defecto)
matriz_correlacion = datosc.corr(method='pearson')

# Paso 2: Graficar el mapa de calor
plt.figure(figsize=(10, 8))
sb.heatmap(matriz_correlacion, annot=True, cmap='coolwarm', vmin=-1, vmax=1)

# Mostrar el gráfico
plt.title('Mapa de calor de la correlación de Pearson')
plt.show()
plt.figure(figsize=(10, 8))

corr= datosc.drop(['Rented Bike Count'],axis=1).corrwith(datosc['Rented Bike Count'])
sb.heatmap(pd.DataFrame(corr),cmap='coolwarm',annot=True)
plt.show()